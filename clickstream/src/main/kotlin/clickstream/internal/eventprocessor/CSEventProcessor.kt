package clickstream.internal.eventprocessor

import clickstream.config.CSEventClassification
import clickstream.extension.eventName
import clickstream.internal.eventscheduler.CSEventScheduler
import clickstream.logger.CSLogger
import clickstream.model.CSEvent
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.ExperimentalCoroutinesApi

/**
 * This is responsible for ingesting analytics events generated by app,adding relevant keys,
 * and forwarding the events to [CSEventScheduler].
 *
 * @param eventScheduler used for scheduling events
 * @param dispatcher used for dispatching events serially
 * @param logger used for logging
 */
@ExperimentalCoroutinesApi
internal class CSEventProcessor(
    private val config: CSEventClassification,
    private val eventScheduler: CSEventScheduler,
    private val dispatcher: CoroutineDispatcher,
    private val logger: CSLogger
) {

    /**
     * Creates event object and forwards to EventScheduler.
     *
     * @param event [CSEvent] which holds guid, timestamp and message
     */
    suspend fun trackEvent(event: CSEvent) {
        logger.debug { "CSEventProcessor#trackEvent" }

        val eventName = event.message.eventName()
        when {
            config.realtimeEvents.contains(eventName) -> {
                eventScheduler.scheduleEvent(event)
            }
            config.instantEvent.contains(eventName) -> {
                eventScheduler.sendInstantEvent(event)
            }
            else -> {
                eventScheduler.scheduleEvent(event)
            }
        }
    }
}
